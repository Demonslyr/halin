import React, { Component } from 'react';
import uuid from 'uuid';
import moment from 'moment';
import hoc from '../../higherOrderComponents';
import _ from 'lodash';
import Spinner from '../../Spinner';
import sentry from '../../sentry';
import queryLibrary from '../../data/query-library';
import { Grid, Dropdown, Message } from 'semantic-ui-react';
import unflatten from 'unflatten';
import MetricsChart from './MetricsChart';
import MetricDescription from './MetricDescription';

const RECORDS = 100;
const MAX_AGE = 2 * 1000;

class MetricsPane extends Component {
    state = {
        key: uuid.v4(),
        metrics: null,
        activeMetric: null,
        menu: {},
        observations: RECORDS,
        dateFormat: 'MMMM Do YYYY, h:mm:ss a',
    };

    componentDidMount() {
        return this.props.node.getAvailableMetrics()
            .then(metrics => {
                // Convert to the format that the dropdown menu wants.
                const metricOptions = _.sortBy(_.uniqBy(metrics.map(m => ({
                    key: m.name, 
                    text: m.name, 
                    value: m.name,
                })), 'key'), 'key');

                const flatMap = {};
                metricOptions.forEach(mo => flatMap[mo.key] = mo.key);

                const menu = unflatten(flatMap);

                // Sorted and unique options
                this.setState({ metrics: metricOptions, menu });
            });
    }

    selectMetric = (event, data) => {
        const promise = this.getMetric(data.value);
        this.setState({
            activeMetric: data.value,
        });
        return promise;
    }

    haveCurrentMetricData(metric) {
        const data = this.state[metric];
        if (!data) { return false; }
        const lastObsTime = data[data.length - 1].t.getTime();
        const utcTimeNow = moment.utc().valueOf();

        if (utcTimeNow - lastObsTime < MAX_AGE) {
            return true;
        }

        sentry.fine(`Metric data for ${metric} aged out; ${moment.utc(lastObsTime).format()} vs. ${moment.utc(utcTimeNow).format()}`);
        return false;
    }

    getMetric(metric) {
        if (this.haveCurrentMetricData(metric)) {
            return Promise.resolve(this.state[metric]);
        }

        this.loading = true;

        return this.props.node.run(queryLibrary.GET_METRIC.query, { metric, last: this.state.observations })
            .then(data => data.records.map(r => ({
                t: new Date(r.get('t').toNumber()),
                value: r.get('value'),
            })).sort((a, b) => a.t - b.t)) // Keep sorted by date
            .catch(err => {
                sentry.reportError(`Failed to fetch metric ${metric}`, err);
                return [];
            })
            .then(data => {
                this.loading = false;
                this.setState({ [metric]: data });
                return data;
            });
    }

    render() {
        return (
            <div className='MetricsPane'>
                <Grid>
                    <Grid.Row columns={12}>
                        <Grid.Column width={4}>
                            <Dropdown placeholder='Neo4j Metric Name'
                                search selection
                                loading={_.isNil(this.state.metrics)}
                                allowAdditions={false}
                                upward={false}
                                onChange={this.selectMetric}
                                options={this.state.metrics} />

                            <Message info>Metrics are generated by the database and not sampled in real time.  For more information, 
                                see the <a href='https://neo4j.com/docs/operations-manual/current/monitoring/metrics/expose/#metrics-enable'>
                                Neo4j operations manual</a>
                            </Message>
                        </Grid.Column>
                        <Grid.Column width={8}>
                            { this.content() }
                        </Grid.Column>
                    </Grid.Row>
                </Grid>
            </div>
        )
    }

    getChartStart() {
        // Data is kept sorted.
        const arr = this.state[this.state.activeMetric];
        return arr[0].t.getTime();
    }

    getChartEnd() {
        // Data is kept sorted.
        const arr = this.state[this.state.activeMetric];
        return arr[arr.length - 1].t.getTime();
    }

    describeDateRange() {
        return (
            <p>
                <strong>{moment.utc(this.getChartStart()).format(this.state.dateFormat)}</strong>
                &nbsp;-&nbsp;
                <strong>{moment.utc(this.getChartEnd()).format(this.state.dateFormat)}</strong>
            </p>
        );
    }

    content() {
        if (!this.state.activeMetric) {
            return <Message>Please select a metric from the drop-down above</Message>
        }

        if (this.state.activeMetric && this.loading) {
            return <Spinner active='true' />
        }

        return (
            <div className='content' style={{ paddingTop: '15px', paddingBottom: '15px' }}>
                <Grid>
                    <Grid.Row columns={1}>
                        <MetricDescription metric={this.state.activeMetric} />
                    </Grid.Row>

                    <Grid.Row columns={1}>
                        <Grid.Column>{ this.describeDateRange() }</Grid.Column>
                    </Grid.Row>

                    <Grid.Row columns={1}>
                        <MetricsChart metric={this.state.activeMetric} data={this.state[this.state.activeMetric]} />
                    </Grid.Row>
                </Grid>
            </div>
        );
    }
}

export default hoc.apocOnlyComponent(
    hoc.csvMetricsComponent(
        MetricsPane));
